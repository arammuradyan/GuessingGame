import kotlin.random.Random

var selectedDifficulty: Int? = 0

// args - array contains steps count for each difficulty level
fun main(args: Array<String>){
    println("Guess number between 1 and 100 which was generated by the program.")
    val randomNumber=Random.nextInt(0,101)
    guessingNumber(args[selectDifficulty()].toInt(),randomNumber)
}

fun selectDifficulty(): Int {
    println("""Select a difficulty level.
    |1- Easy, 2- Medium, 3- Hard""".trimMargin())

    selectedDifficulty = readLine()?.toIntOrNull()

    if(selectedDifficulty in 1..3){
       return DifficultyLevel.getLevel(selectedDifficulty)
    }else{
        println("You must enter 1,2 or 3")
        selectDifficulty()
    }

    return DifficultyLevel.getLevel(selectedDifficulty)
}

fun guessingNumber(steps: Int, randomNumber: Int) {
    var stepsCount=steps

    println("You have $stepsCount ${if (stepsCount-- >1) "steps" else "step"}.")

    val userInputNumber = readLine()?.toIntOrNull()
    if (userInputNumber in 1..100 && userInputNumber !=null && stepsCount >= 0) {

        if (userInputNumber == randomNumber) {
            println("You won")
        } else if (userInputNumber > randomNumber && stepsCount > 0) {
            println("Take lower")
            guessingNumber(stepsCount, randomNumber)
        } else if (userInputNumber < randomNumber && stepsCount > 0) {
            println("Take higher")
            guessingNumber(stepsCount, randomNumber)
        } else if (stepsCount == 0) {
            println("""Try again.
                |Restart""".trimMargin())
            main(arrayOf("7", "5", "3"))
        }

    } else if (stepsCount == 0) {
        println("""Try again.
                |Restart""".trimMargin())
        main(arrayOf("7", "5", "3"))
    } else {
        println("You must enter number between 1 and 100")
        guessingNumber(stepsCount,randomNumber)
    }
}

enum class DifficultyLevel(val level: Int){
    EASY(0),
    MEDIUM(1),
    HARD(2);

    companion object{
        fun getLevel(level: Int?): Int{
            return when(level){
                1-> EASY.level
                2-> MEDIUM.level
                else -> HARD.level
            }
    }
}

}